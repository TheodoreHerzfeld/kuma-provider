// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/TheodoreHerzfeld/terraform-provider-uptime-kuma/internal/sdk"
	"github.com/TheodoreHerzfeld/terraform-provider-uptime-kuma/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"net/http"
)

var _ provider.Provider = &UptimeKumaProvider{}

type UptimeKumaProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// UptimeKumaProviderModel describes the provider data model.
type UptimeKumaProviderModel struct {
	ServerURL            types.String `tfsdk:"server_url"`
	OAuth2PasswordBearer types.String `tfsdk:"o_auth2_password_bearer"`
	Username			types.String `tfsdk:"username"`
	password			types.String `tfsdk:"password"`
}

func (p *UptimeKumaProvider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "uptime-kuma"
	resp.Version = p.version
}

func (p *UptimeKumaProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"server_url": schema.StringAttribute{
				MarkdownDescription: "Server URL (defaults to http://localhost:8000)",
				Optional:            true,
				Required:            false,
			},
			"o_auth2_password_bearer": schema.StringAttribute{
				Sensitive: true,
				Optional:  true,
				Computed: true,
			},
			"username": schema.StringAttribute{
				Optional: true,
			}
			"password": schema.StringAttribute{
				Optional: true,
				Sensitive: true,
			}
		},
	}
}

type LoginResponse struct {
	Access_Token string
	Token_Type   string
}

func (p *UptimeKumaProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data UptimeKumaProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	ServerURL := data.ServerURL.ValueString()
	username := data.Username.ValueString()
	password := data.Username.ValueString()

	if ServerURL == "" {
		ServerURL = "http://localhost:8000"
	}

	oAuth2PasswordBearer := new(string)
	if !data.OAuth2PasswordBearer.IsUnknown() && !data.OAuth2PasswordBearer.IsNull() {
		*oAuth2PasswordBearer = data.OAuth2PasswordBearer.ValueString()
	} else {
		tflog.Info(ctx, "Using username/password to get auth token")

		loginForm := url.Values{
			"username": {username},
			"password": {password},
		}

		loginResp, err := http.Post(host+"/login/access-token", "application/x-www-form-urlencoded", strings.NewReader(loginForm.Encode()))
		if err != nil {
			resp.Diagnostics.AddAttributeError(
				path.Root("password"),
				"Error logging in to uptime-kuma api",
				err.Error(),
			)
		}

		defer loginResp.Body.Close()
		loginBody, err := io.ReadAll(loginResp.Body)
		if err != nil {
			resp.Diagnostics.AddAttributeError(
				path.Root("password"),
				"Error logging in to uptime-kuma api",
				err.Error(),
			)
		}

		var loginJson LoginResponse
		err = json.Unmarshall(loginBody, &loginJson)
		if decodeErr != nil {
			resp.Diagnostics.AddAttributeError(
				path.Root("password"),
				"error decoding response",
				err.Error(),
			)
		}

		oAuth2PasswordBearer = loginJson.Access_Token
	}
	security := shared.Security{
		OAuth2PasswordBearer: oAuth2PasswordBearer,
	}

	httpClient := http.DefaultClient
	httpClient.Transport = NewLoggingHTTPTransport(http.DefaultTransport)

	opts := []sdk.SDKOption{
		sdk.WithServerURL(ServerURL),
		sdk.WithSecurity(security),
		sdk.WithClient(httpClient),
	}
	client := sdk.New(opts...)

	resp.DataSourceData = client
	resp.ResourceData = client
}

func (p *UptimeKumaProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{}
}

func (p *UptimeKumaProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &UptimeKumaProvider{
			version: version,
		}
	}
}
